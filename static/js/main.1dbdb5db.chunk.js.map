{"version":3,"sources":["components/Footer/ThemeChanger/index.tsx","components/Footer/index.tsx","config/index.ts","logic/gasOperations.ts","utils/index.ts","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeChanger","useState","themeState","setThemeState","useEffect","localStorage","getItem","setItem","document","body","classList","add","remove","className","onClick","color","size","Footer","target","rel","href","mainnetConfig","getGasPrice","a","fetch","response","ok","json","gasInfo","lastUpdate","BigNumber","lowest","safeLow","standard","fast","fastest","estimateGasSafeCreation","numberOwners","JSON","stringify","method","headers","paymentInfo","gas","payment","getWeb3","Web3","process","App","currentNumOwners","setCurrentNumOwners","undefined","gasPrice","setGasPrice","history","setHistory","toString","initializeGasPrice","getSafeCreationCosts","currentCreationGas","prevHistory","numOwners","gasUsed","costWei","weiAmount","gweiAmount","utils","fromWei","decimalPlaces","fromWeiToGwei","autoFocus","type","value","onChange","event","parseInt","map","h","index","key","ethAmount","fromWeiToEther","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1dbdb5db.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { FiSun } from 'react-icons/fi'\nimport { FiMoon } from 'react-icons/fi'\nimport './styles.scss'\n\nconst ThemeChanger = () => {\n  const [themeState, setThemeState] = useState(false)\n\n  useEffect(() => {\n    const getTheme = localStorage.getItem('safe-calculator-theme')\n    if (getTheme === 'dark') {\n      setThemeState(true)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (themeState) {\n      localStorage.setItem('safe-calculator-theme', 'dark')\n      document.body.classList.add('dark-mode')\n    } else {\n      localStorage.setItem('safe-calculator-theme', 'light')\n      document.body.classList.remove('dark-mode')\n    }\n  }, [themeState])\n\n  return (\n    <div className=\"themeChanger\" onClick={() => setThemeState(!themeState)}>\n      {themeState ? (\n        <FiSun color=\"white\" size=\"40px\" />\n      ) : (\n        <FiMoon color=\"black\" size=\"40px\" />\n      )}\n    </div>\n  )\n}\n\nexport default ThemeChanger\n","import React from 'react'\nimport ThemeChanger from './ThemeChanger'\nimport { SiGithub } from 'react-icons/si'\nimport './styles.scss'\n\nconst Footer = () => (\n  <footer>\n    <a\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      href=\"https://github.com/germartinez/gnosis-safe-calculator\"\n    >\n      <SiGithub className=\"github\" />\n    </a>\n    <ThemeChanger />\n  </footer>\n)\n\nexport default Footer\n","export const mainnetConfig = {\n  safeRelayApiUrl: 'https://safe-relay.gnosis.io',\n  safeMasterCopy: '0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F',\n  safeProxyFactory: '0x0fB4340432e56c014fa96286de17222822a9281b',\n  fallbackHandler: '0x40A930851BD2e590Bd5A5C981b436de25742E980'\n}\n\nexport const rinkebyConfig = {\n  safeRelayApiUrl: 'https://safe-relay.rinkeby.gnosis.io',\n  safeMasterCopy: '0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F',\n  safeProxyFactory: '0x336c19296d3989e9e0c2561ef21c964068657c38',\n  fallbackHandler: '0x40A930851BD2e590Bd5A5C981b436de25742E980'\n}\n","import BigNumber from 'bignumber.js'\nimport { mainnetConfig } from '../config'\n\ninterface GasCreationInfo {\n  gas: BigNumber\n  payment: BigNumber\n}\n\ninterface GasPriceInfo {\n  lastUpdate: BigNumber\n  lowest: BigNumber\n  safeLow: BigNumber\n  standard: BigNumber\n  fast: BigNumber\n  fastest: BigNumber\n}\n\nexport const getGasPrice = async (): Promise<GasPriceInfo | undefined> => {\n  const response = await fetch(\n    mainnetConfig.safeRelayApiUrl + '/api/v1/gas-station/'\n  )\n  if (!response.ok) {\n    return\n  }\n  const gasInfo = await response.json()\n  return {\n    lastUpdate: new BigNumber(gasInfo.lastUpdate),\n    lowest: new BigNumber(gasInfo.lowest),\n    safeLow: new BigNumber(gasInfo.safeLow),\n    standard: new BigNumber(gasInfo.standard),\n    fast: new BigNumber(gasInfo.fast),\n    fastest: new BigNumber(gasInfo.fastest)\n  }\n}\n\nexport const estimateGasSafeCreation = async (\n  numberOwners: number\n): Promise<GasCreationInfo | undefined> => {\n  const body = JSON.stringify({\n    numberOwners\n  })\n  const response = await fetch(\n    mainnetConfig.safeRelayApiUrl + '/api/v3/safes/estimates/',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body\n    }\n  )\n  if (!response.ok) {\n    return\n  }\n  const paymentInfo = await response.json()\n  return {\n    gas: new BigNumber(paymentInfo[0].gas),\n    payment: new BigNumber(paymentInfo[0].payment)\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport Web3 from 'web3'\n\nexport const zeroAddress = '0x0000000000000000000000000000000000000000'\n\nlet web3: any\n\nconst getInfuraUrl = () => {\n  return `https://mainnet.infura.io:443/v3/${process.env.REACT_APP_INFURA_TOKEN}`\n}\n\nexport const getWeb3 = () => (web3 ? web3 : new Web3(getInfuraUrl()))\n\nexport const fromWeiToGwei = (weiAmount: BigNumber): BigNumber => {\n  const web3 = getWeb3()\n  const gweiAmount: string = web3.utils.fromWei(weiAmount.toString(), 'Gwei')\n  return new BigNumber(gweiAmount.toString()).decimalPlaces(5)\n}\n\nexport const fromWeiToEther = (weiAmount: BigNumber): BigNumber => {\n  const web3 = getWeb3()\n  const ethAmount: string = web3.utils.fromWei(weiAmount.toString(), 'ether')\n  return new BigNumber(ethAmount.toString()).decimalPlaces(5)\n}\n","import React, { useState, useEffect } from 'react'\nimport { BigNumber } from 'bignumber.js'\nimport Footer from '../Footer'\nimport { estimateGasSafeCreation, getGasPrice } from '../../logic/gasOperations'\nimport { fromWeiToEther, fromWeiToGwei } from '../../utils'\nimport './styles.scss'\n\ninterface History {\n  numOwners: number\n  gasUsed: BigNumber\n  costWei: BigNumber\n}\n\nconst App = () => {\n  const [currentNumOwners, setCurrentNumOwners] = useState<number>(0)\n  const [gasPrice, setGasPrice] = useState<undefined | BigNumber>(undefined)\n  const [history, setHistory] = useState<History[]>([])\n\n  useEffect(() => {\n    const initializeGasPrice = async () => {\n      const gasInfo = await getGasPrice()\n      if (!gasInfo) return\n      setGasPrice(new BigNumber(gasInfo.fast.toString()))\n    }\n    initializeGasPrice()\n  }, [])\n\n  const handleNumOwnersChange = (event: any) => {\n    setCurrentNumOwners(parseInt(event.target.value))\n  }\n\n  const getSafeCreationCosts = async () => {\n    if (!gasPrice || currentNumOwners <= 0) return\n    const currentCreationGas = await estimateGasSafeCreation(currentNumOwners)\n    if (!currentCreationGas) return\n    setHistory((prevHistory) => [\n      {\n        numOwners: currentNumOwners,\n        gasUsed: currentCreationGas.gas,\n        costWei: currentCreationGas.payment\n      },\n      ...prevHistory\n    ])\n  }\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Gnosis Safe Calculator</h1>\n        <h2>How much does it cost to create a Gnosis Safe?</h2>\n      </header>\n      <div className=\"calculatorContainer\">\n        <div className=\"calculator\">\n          <p>\n            <b>Gas price:</b>{' '}\n            {gasPrice && fromWeiToGwei(gasPrice).toString() + ' Gwei'}\n          </p>\n          <p>\n            <b>Number of owners:</b>\n          </p>\n          <input\n            autoFocus\n            type=\"number\"\n            value={currentNumOwners || ''}\n            onChange={handleNumOwnersChange}\n          />\n          <button onClick={getSafeCreationCosts}>Get result</button>\n        </div>\n        <div className=\"calcResults\">\n          {history &&\n            history.map((h, index) => (\n              <div key={index} className=\"calcResult\">\n                <div className=\"owners\">\n                  <div className=\"ownersValue\">{h.numOwners}</div>\n                  <div className=\"ownersLabel\">\n                    owner{h.numOwners > 1 && 's'}\n                  </div>\n                </div>\n                <div className=\"cost\">\n                  <div className=\"costEth\">\n                    {fromWeiToEther(h.costWei).toString()} ETH\n                  </div>\n                  <div className=\"gasUsed\">{h.gasUsed.toString()} gas used</div>\n                </div>\n              </div>\n            ))}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}